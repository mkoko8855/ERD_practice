package jdbc;

import java.net.ConnectException;
import java.sql.Connection;
import java.sql.ConnectionBuilder;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class JDBCInsert {

	public static void main(String[] args) {
		
		
	Scanner sc = new Scanner(System.in);
	System.out.println("*** 회원 가입 페이지 ***");
	
	System.out.print("아이디: ");
	String id = sc.next();
	
	System.out.print("비밀번호: ");
	String pw = sc.next();
	
	System.out.print("이름: ");
	String name = sc.next();
	
	System.out.print("나이: ");
	int age = sc.nextInt();
	
	/////////////////////////////////////////////
	
	//SQL문 작성
	//SQL문은 String형태로 작성합니다.
	String sql = "INSERT INTO members (mem_id, mem_pw, mem_name, mem_age) VALUES(?, ?, ?, ?)";
	//변수가 들어갈 자리에 ?를 채운다.
	
	//DB 연동 순서
	//1. DB 사용자 계정명, 암호, DB url 등 초기 데이터 변수를 설정한다. (접속먼저하는단계)
	String url = "jdbc:oracle:thin://localhost:1521:xe"; //포트번호 > 오라클은 1521, mysql은 33몇번.
	String uid = "hr";
	String upw = "hr";
	
	
	
	
	
	//사용할 객체의 변수를 미리 선언(finally에서도 사용해야 하니까)
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	
	
	
	
	
	
	//2. JDBC 커넥터 드라이버 호출
	//Java 프로그램과 DB를 연결해주는 드라이버 클래스 생성.
	try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		//3. DB 연동을 위한 클래스들의 객체를 생성.
		/*
		  # a. Connection 객체 : DB와의 연결(접속)을 위한 객체
		  Connection 객체는 new 연산자를 통해 직접 생성하는 것이 아니라, DriverManager 클래스가 제공하는
		  정적 메서드인 getConnection()을 호출하여 객체를 받아온다.
		 */
		 conn = DriverManager.getConnection(url, uid, upw);
		 //접속을 했으면 SQL을 실행을 해야지?
		 // # b. PreparedStatement 객체.
		 // 이 객체는 SQL문을 실행하기 위한 객체이다.
		 // pstmt 객체는 conn 객체가 제공하는 메서드를 호출하여 객체를 받아온다.
		 // 그리고 매개값으로 실행시킬 sql문을 전달한다.
		 pstmt = conn.prepareStatement(sql);
		 
		 
		 /*
		   # c. 물음표 채우기 (SQL문 완성하기)
		   : pstmt 객체를 생성했다면, sql문의 ?를 채워준다.
		   ?는 첫번째 물음표부터 1번 인덱스값을 가지며,
		   순차적으로 인덱스가 1씩 증가한다. 
		   
		   DB 테이블의 컬럼 타입에 따라 문자열이면 setString(),
		   문자열타입이 넘버라면 setInt(),
		   실수는 setDouble()
		   등등의 메서드를 통해 ?를 채운다.
		  */
		 
		 //String sql = "INSERT INTO members 
		 //(mem_id, mem_pw, mem_name, mem_age) VALUES(?, ?, ?, ?)";
         //이걸보고 채워보자
		 pstmt.setString(1, id);
		 pstmt.setString(2,  pw);
		 pstmt.setString(3,  name);
		 pstmt.setInt(4,  age);
		
		 
		 
		 
		 
		 /*
		   그럼이제 SQL문은 완성이 되었으니
		   
		   # d: pstmt 객체를 통한 SQL문 실행하자.
		   
		   2가지가 있다.
		   
		   
		   1. INSERT거나 UPDATE거나 DELETE 명령인 경우에는
		   메서드가 executeUpdate()를 호출한다.
		  
		  
		   2. SELECT 명령일 경우에는 executeQuery()를 호출한다.
		   
		   
		   
		   3. 우린 지금 INSERT 하고 있으니 executeUpdate()를 호출해야겠다.
		   
		   
		   
		   4. executeUpdate()는 sql문 실행 시 성공한 쿼리문의 개수를,
		   	  실패하면 0이 리턴이 된다.
		   	  
		  */
		 
		   // 불러보자
		 
		 int rn = pstmt.executeUpdate();  //int값으로 리턴이 된다! 개수를주니까. 성공하면 1 실패하면 0
		 //간단하게 조건문이용해서 봐보자
		 if(rn==1) {
			 System.out.println("DB에 회원정보 저장 성공 !");
		 } else {
			 System.out.println("DB에 회원정보 저장 실패 !");
		 }
		 
		 
		 
		//executeUpdate 확인하고 다음은,
		// 예외 실행 여부와 상관 없이 항상 실행해야하는 로직 > finally : 성공이든 실패든 무조건 close를 하기 위해 finally에다가 닫아줄것이다.
		 
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		//  4.  DB 객체 자원을 반납 해준다.
		// 4-1 : 원활한 JDBC 프로그래밍을 위해 사용한 자원을 반납한다.
		//pstmt.close(); 는 오류나기 떄문에 Connection conn은 try문이 열리기 전에 작성해야한다. 위로 가자.
		try {
			pstmt.close(); //근데도 빨간줄이 뜨는데, 이것도 예외처리를 해주면 된다.
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	
	
	
	//sql문 작성  >  디비에 접속하기 위한 변수를 만들고 > 드라이버(forName)를 호출 > 디비에 접속하기 위한 커넥션이라는 객체를 받아온다 >  이 객체에게 우리는 미리 준비했던 url, uid, upw를 준다.
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
